GENERAL




VISIBILIDAD DE LAS CLASES PUBLICAS >>>> REVISAR <<<<


EXTENSION METHODS
----------------------------------------------------------------------






CLUB MEMBER
----------------------------------------------------------------------

Diseño
------


Coding logic
------------



User Stories
------------

  - Han de tener nombre y primer apellido. El segundo es opcional


Unit Tests
----------

  - Check nulos, cadenas vacias y nombres con solo espacios en nombre y apellidos
  - Trim los nombres y apellidos
  - Lanzar excepciones al instanciar y en los 'setters' de las propiedades de los nombres y apellidos



SERVICIOS
----------------------------------------------------------------------

Diseño
------


Coding logic
------------



User Stories
------------

  - Anadir un servicio
  - Suscribir a un miembro a un servicio - > asociarle un payment method


Unit Tests
----------





--------------------------------------------------------------------
BANK ACCOUNTS

Unit testing:

- Si hay tiempo, al final, hacer que, ante un CCC o IBAN erroneo se presente una excepción,
 en vez de, simplemente, debolver nulo.


---------------------------------------------------------------------
INVOICES

Diseño



Coding logic



User Stories

  - Se pueden generar pro-forma invoices en base a un servicio o compra igual que las invoices
  - Las Proforma invoices son igualmente consecutivas
  - Las Pro-Forma Invoices son igualmente entre 1 y 999999
  - Una pro-forma invoice se puede 'convertir' en una invoice normal.
	* Constructor de la invoice con una pro-forma invoice) ó
	* Método .ToInvoice() 
		- Devuelve la ID de la nueva invoice creada?ç
		- NO. Nunca se devulave la ID de la invoice al ser creada.
		- Pues planteate hacerlo. Seria una locura cambiar TODOS los tests...
		- CIERTO!
  
  - Una factura no puede tener valor negativo
  - Cuando necesitemos anular una factura
    * Emitimos una 'amendment invoice' por el total de la factura, asociada a la factura original a eliminar
	* Marcamos la factura original como 'cancelled'
  - Cuando un invoice es cancelled todos los pagos restantes son cancelled
  - Cuando un invoice es dado por uncollectible todos los pagos restantes son dados por uncollectible
  - Separar los sequence numbers de las facturas y profomas
  - Las facturas rectificativas tiene el mismo invoiceID que las original, con diferente prefijo


Unit Tests

- Lanzar excepcion si lista de transacciones es cero
- Lanzar excepcion si transacciones tienen valores negativos(?)
- ¿Se permiten transacciones negativas?
 - Al añadir una factura CON INVOICEID se supone que estamos cargando desde la persistencia, luego el
 constructor ha de incluir TODOS los campos (bills...)


----------------------------------------------------------------------
BILLING

Diseño
------


 - Estado de las 'Bill':
     * Al cobro: La fecha de vencimiento aún no ha pasado
	 * Pagada
	 * Impagada: Sigue intentando cobrarse
		* La fecha de vencimiento ha pasado
		* La factura ha venido devuenta del banco
	 * Anulada: Se ha anulado por cualquier razón. 
	 * Fallida: 
 - Una factura puede tener 'additional charges' debido, por ejemplo, a devoluciones bancarias


Coding Logic
------------



  
User stories
------------
 
* Generar un bill
 - Dado un servicio, se genera una factura y se crea un bill, forma de pago: en caja
 
* Cobrar un bill (por caja)
 - Cuando el socio paga el recibo por caja
 - El recibo aparece como pagado
 - El Definitive Payment Method es por caja, y se registra la fecha del pago
 - Aparte se registra la fecha de pago en el 'bill' (payment date)?
 - Como es el ultimo recibo, la factura aparecerá como pagada, con fecha la del último bill
 
* Cobrar un bill (por remesa)
 
* Cobrar un bill (por cheque)
 
* Cobrar un bill (transferencia recibida)
 
* Anular un bill
 
* Renegociar un bill 
 
* Un Member tiene un tipo de PaymentMethod definido
* Podemos cambiar el default Payment Method de un miembro

* Al añadir un bill este se crea SIN payment method definido
* Podemos asignar al recibo uno de los payments methods del socio (que un recibo vaya a una cuenta en particular)
* Un bill es pagado -> en ese momento se le asocia el payment method utilizado
* Un bill es anulado
* Cuando el último bill es pagado -> factura pagada
* Cuando el último bill es anulado -> si hubo pagos la factura es pagada, si todos los bill estaban anulados 
 

UnitTest
--------

 - La lista de Bills asociada a unninvoice es accesible (tiene un 'get')
 - Si es un nuevo 'Bill' ID del bill lom calcula la clase invoice al añadir el bill al invoice
 - Un bill puede ser creado con una forma definida de pago
 - Un bill puede cambiar su forma definida de pago
 - A un bill se le puede cambiar la fecha de vencimiento
 - A un invoice se le puede asociar una lista de bills que sumen igual que el total del valor neto de todas las transacciones en el momento de crearla
    -> Al cargar desde persistencia -> incluyen ya el BillID
	-> Al inicializar por cualquier razon -> se le les ha de crear un billID
 - Un bill se puede sustituir por una lista de otros bill que sumen lo mismo
 - La lista puede ser de 1:1
 - La lista puede ser de 1:varios
 - La lista puede ser de varios:1
 - La lista puede ser de varios:varios
 - Si los importes no coincicen se lanza excepcion
 - Los bill sustituidos no se borran
  -> Se los marca como renegociados
  -> Se les asocia un PaymentAgreement (un invoice puede tener varios 'Payment Agreement')

 - Que coincidan las que entran con las que salen al renegociar las bill

 
----------------------------------------------------------------------
DOMICILIACIONES

Diseño
------


Un miembro tiene

 - Un lista de cuentas bancarias
 - Una lista de domiciliaciones
 - Pueden existir numeros de cuenta sin domiciliacion asociada? Como manejar los cambios de domiciliacion? Hay que tener en cuanta que:
	* Un socio puede tener muchas cuentas
	* Un socio puede tener muchos servicios domiciliados
	* Una cuenta puede estar asociada a varios servicios, y:
		- Al cambiar la cuenta de un servicio, puede que quiera mantener esa cuanta para otros servicios, luego no podemos eliminarla completamente
		- Queremos mantener un historico de todos los cambios de cuenta en cada domiciliacion
	* Así que mantendremos el historial de DOMICILIACIONES, en base a NUMERO DE REFERENCIA. Así:
		- Si un socio cambia una CUENTA, deberemos de preguntarle primero de que domiciliacion (numero de referencia) quiere hacer el cambio. Si no dice nada, cambiaremos todoas las domiciliaciones que tengan ese Nº cuenta
		- Cuando cambiamos el numero de cuenta de una domiciliacion, copiamos la domiciliacion antigua al historico, con una FECHA DE BAJA
 - ¿Como manejar el historial de pagos de una domiciliacion?¿Mediante el numero de referencia?
	* NO. De esta manera no podemos ver si tal recibo fue pagado mediante tal cuenta o tal otra. Podríamos intentar cruzarlo mediante fechas, pero no.
	* Opciones:
		- Cada domiciliacion en el histórico ha de tener su ID. Asociamos los pagos al ID de domiciliacion.
		- ¿Podemos usar una ID de 'Payment Method'?
		
 - Si añadimos una domiciliacion nueva sin que la cuenta este dada de alta, se la añadimos


Coding logic
------------



User Stories
------------

* Podemos añadir una nueva domiciliacion a la lista de domiciliaciones del socio
* Podemos quitar una domiciliacion de la lista de domiciliaciones del socio 




Unit Tests
----------


-----------------------------------------------------------------------
REMESAS

Diseño
------


Un miembro tiene

 - Un lista de cuentas bancarias
 - Una lista de domiciliaciones
 - Si añadimos una domiciliacion nueva sin que la cuenta este dada de alta, se la añadimos


Coding logic
------------



User Stories
------------



Unit Tests
----------


